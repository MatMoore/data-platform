name: "Terraform: GitHub resources"

on:
  push:
    paths:
      - 'terraform/github/**'
      - '.github/workflows/github.yml'
    branches:
      - main
  pull_request:
    paths:
      - 'terraform/github/**'
      - '.github/workflows/github.yml'
    branches:
      - main
    types: [opened, edited, reopened, synchronize]
  schedule:
    # * is a special character in YAML so you have to quote this string
    # trigger every Saturday at 12:00am
    - cron: '0 04 * * 6'
  workflow_dispatch:

defaults:
  run:
    shell: bash

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  github-plan-and-apply:
    runs-on: ubuntu-latest
    env:
      TF_VAR_repository_github_token: ${{ secrets.REPOSITORY_GITHUB_TOKEN }}
      TF_VAR_team_github_token: ${{ secrets.TEAMS_GITHUB_TOKEN }}
      MANAGEMENT_ACCOUNT_ID: ${{ secrets.MANAGEMENT_ACCOUNT_ID }}
      TF_IN_AUTOMATION: true
      AWS_REGION: "eu-west-2"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838 # v1.7.0
        with:
          role-to-assume: "arn:aws:iam::${{ env.MANAGEMENT_ACCOUNT_ID }}:role/GlobalGitHubActionAccess"
          role-session-name: githubactionsrolesession
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1 # v2.0.3
        with:
          terraform_version: "~1"
          terraform_wrapper: false

      - name: terraform init
        id: init
        run: |
          terraform init -backend-config=role_arn=arn:aws:iam::${{ env.MANAGEMENT_ACCOUNT_ID }}:role/GlobalGitHubActionAdmin -reconfigure
        working-directory: "terraform/github"
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: "terraform/github"
      - name: terraform plan
        id: plan
        run: terraform -chdir="terraform/github" plan -input=false -no-color
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: terraform apply
        if: github.event.ref == 'refs/heads/main'
        run: terraform -chdir="terraform/github" apply -input=false -no-color -auto-approve